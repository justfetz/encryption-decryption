type: edu
custom_name: stage5
files:
  - name: test/EncryptDecryptTest.java
    visible: false
    text: |
      import encryptdecrypt.Main;
      import org.hyperskill.hstest.common.FileUtils;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.io.IOException;
      import java.nio.charset.StandardCharsets;
      import java.nio.file.Files;
      import java.nio.file.NoSuchFileException;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      import java.util.List;
      
      public class EncryptDecryptTest extends StageTest<String> {
          public EncryptDecryptTest() {
              super(Main.class);
          }
      
          @Override
          public List<TestCase<String>> generate() {
              return List.of(
                  new TestCase<String>()
                      .addArguments(
                          "-mode", "enc",
                          "-key", "5",
                          "-in", "in.txt",
                          "-out", "output.txt"
                      )
                      .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                      .addFile("in.txt", "Welcome to hyperskill!"),
      
                  new TestCase<String>()
                      .addArguments(
                          "-key", "0",
                          "-mode", "enc",
                          "-in", "input.txt",
                          "-out", "output.txt"
                      )
                      .setAttach("Hello")
                      .addFile("input.txt", "Hello"),
      
                  new TestCase<String>()
                      .addArguments(
                          "-key", "1",
                          "-in", "i.txt",
                          "-out", "output.txt",
                          "-mode", "enc"
                      )
                      .setAttach("123456789")
                      .addFile("i.txt", "012345678"),
      
                  new TestCase<String>()
                      .addArguments(
                          "-mode", "dec",
                          "-in", "input.txt",
                          "-out", "output.txt",
                          "-key", "5"
                      )
                      .setAttach("Welcome to hyperskill!")
                      .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),
      
                  new TestCase<String>()
                      .addArguments(
                          "-mode", "dec",
                          "-key", "0",
                          "-in", "input.txt",
                          "-out", "output.txt"
                      )
                      .setAttach("Hi")
                      .addFile("input.txt", "Hi"),
      
                  new TestCase<String>()
                      .addArguments(
                          "-mode", "dec",
                          "-key", "1",
                          "-in", "input.txt",
                          "-out", "output.txt"
                      )
                      .setAttach("111122223333")
                      .addFile("input.txt", "222233334444")
              );
          }
      
          @Override
          public CheckResult check(String reply, String clue) {
              String fileName = "output.txt";
              String output;
      
              try {
                  Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                  output = Files.readString(path, StandardCharsets.UTF_8);
              } catch (NoSuchFileException e) {
                  return new CheckResult(false, "File output.txt not found!");
              } catch (IOException e) {
                  return new CheckResult(false, "Cannot read from file!");
              }
      
              if (!output.trim().equals(clue.trim())) {
                  return new CheckResult(false, "Wrong result in the file!");
              }
      
              return new CheckResult(true);
          }
      }
    learner_created: false
  - name: src/encryptdecrypt/Main.java
    visible: true
    text: "package encryptdecrypt;\nimport java.util.Scanner;\nimport java.lang.*;\n\
    \npublic class Main {\n    /*Rules\n    If there is no -mode, the program should\
    \ work in enc mode.\n    If there is no -key, the program should consider that\
    \ key = 0.\n    If there is no -data, the program should assume that the data\
    \ is an empty string.\n    */\n    public static StringBuffer encrypt(String text,\
    \ int s) \n    { \n        StringBuffer result = new StringBuffer(); \n  \n  \
    \      for (int i = 0; i < text.length(); i++) \n        { \n            if (Character.isUpperCase(text.charAt(i)))\
    \ \n            { \n                char ch = (char)(((int)text.charAt(i) + \n\
    \                                  s) % 128); \n                result.append(ch);\
    \ \n            } \n            else\n            {   \n                char ch\
    \ = (char)(((int)text.charAt(i) + \n                                  s) % 128);\
    \ \n                result.append(ch); \n            } \n        } \n        return\
    \ result; \n    } \n     public static StringBuffer decrypt(String text, int s)\
    \ \n    { \n        StringBuffer result = new StringBuffer(); \n  \n        for\
    \ (int i=0; i<text.length(); i++) \n        { \n            if (Character.isUpperCase(text.charAt(i)))\
    \ \n            { \n                //System.out.println((int) text.charAt(i));\n\
    \                char ch = (char)(((int)text.charAt(i) - \n                  \
    \                s) % 128); \n                result.append(ch); \n          \
    \  } \n            else\n            { \n                char ch = (char)(((int)text.charAt(i)\
    \ - \n                                  s) % 128); \n                result.append(ch);\
    \ \n            } \n        } \n        return result; \n    } \n    public static\
    \ void main(String[] args) {\n     \n        String type = \"\";\n        int\
    \ shift=0;\n        String textToTranslate = \"\";\n        \n        for(int\
    \ i = 0; i<args.length; i++) {\n            if(args[i].equals(\"-mode\")) {\n\
    \                type = args[i+1];\n            }\n        }\n        for(int\
    \ j =0;j<args.length;j++) {\n            if(args[j].equals(\"-key\")){\n     \
    \           shift = Integer.parseInt(args[j+1]);\n            }\n        }\n \
    \       for(int k=0;k<args.length;k++) {\n            if(args[k].equals(\"-data\"\
    )) {\n                textToTranslate = args[k+1];\n            }\n        }\n\
    \        //System.out.print(type);\n        //System.out.print(shift);\n     \
    \   //System.out.print(textToTranslate);\n        /*        \n            } else\
    \ if(args[i].equals(\"-key\")) {\n                shift = Integer.parseInt(args[i+1]);\n\
    \            } else if(args[i].equals(\"-data\")) {\n                textToTranslate\
    \ = args[i+1];\n            }\n        */\n        \n        if (type.equals(\"\
    enc\")) {\n            System.out.println(encrypt(textToTranslate, shift));\n\
    \        } else if (type.equals(\"dec\")) {\n            System.out.println(decrypt(textToTranslate,\
    \ shift));\n        } \n        \n     \n\n      }\n    }\n\n\n"
    learner_created: false
  - name: output.txt
    visible: true
    learner_created: true
  - name: dump.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5391#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/249/implement">JetBrains
    Academy</a>
  time: "Mon, 20 Jul 2020 10:32:32 UTC"
record: 5
